# -*- coding: utf-8 -*-
"""54481.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AhZFR91mO8f6Z0X3SLThyKll8C_lPNY4
"""

import pandas as pd

data = {'eth': ['ETH-USD', 'yahoo'],
        'sol':['SOL-USD', 'yahoo'],
        'ada':['ADA-USD', 'yahoo']
        }

dataFrame = pd.DataFrame()

engine = pd.DataFrame(data, columns = ['eth', 'sol', 'ada'])

my_series = engine['eth'].squeeze()

print(my_series)
print (type(my_series))

def test(listChecker):
    return listChecker.count(19) == 2 and listChecker.count(5) >= 3
listChecker = [19,19,15,5,3,5,5,2]
print(listChecker)
print(test(listChecker))


listChecker = [19,15,15,5,3,3,5,2]
print(listChecker)
print(test(listChecker))


listChecker = [19,19,5,5,1,2,9]
print(listChecker)
print(test(listChecker))

from ast import mod
def powerMode(a):
  
 a = int 
b = 256 

a = int(input("enter a number:  "))

if a > b and a % 34 == 4 :
  print("True")
else :
  print("False")

def maxLength(list):
    a = 0
    answer = ""
    for item in list:
        x = len(item)
        if x > a:
            a = x
            answer = item
        elif x == a:
            if item not in list:
                answer = answer + " " + item
    return answer

print(maxLength(['hi', 'hello', 'welcome','good morning', 'great', 'hola']))

def monotonic(L):
    if (all(x<y for x, y in zip(L, L[1:]))):
        return "Increasing" 
    if (all(x>y for x, y in zip(L, L[1:]))):
        return "Decreasing"
    return "Not Monotonic"

print(monotonic([1,2,3,4,5,6]))
print(monotonic([6,5,4,3,2,1]))
print(monotonic([19,19,5,5,5,5,5]))